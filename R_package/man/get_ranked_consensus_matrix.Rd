% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_ranked_consensus_matrix.R
\name{get_ranked_consensus_matrix}
\alias{get_ranked_consensus_matrix}
\title{Create edge ranked correlation matrix by combining information from different inference algorithms with the help of internal function calculate_correlation_matrix().}
\usage{
get_ranked_consensus_matrix(
  gx_table = NULL,
  iMethods = NULL,
  iEst = NULL,
  iDisc = NULL,
  ncores = 2,
  matList = NULL,
  mat_weights = "rank",
  ensemble_strategy = "minet",
  debug_output = FALSE,
  updateProgress = NULL
)
}
\arguments{
\item{gx_table}{Gene expression table as a data frame.}

\item{iMethods}{Vector of valid inference algorithms for MINET package.}

\item{iEst}{Vector of valid correlation methods for MINET package.}

\item{iDisc}{Vector of valid discretization methods for MINET package.}

\item{ncores}{Number of cores for running instances of MINET in parallel default:2.}

\item{debug_output}{Print help and status messages to help debug the running of the function default:FALSE.}

\item{updateProgress}{Shiny application can request for update of progress from this function default:NULL.}

\item{edge_selection_strategy}{How to select top ranked edges default:default. By default selectis top edges until all the nodes have at least one edge.}

\item{topN}{Top n percentage edges to select if edge_selection_strategy is 'top' default:10.}
}
\value{
A symmetrix matrix with median edge ranks representing the edge rank based consensus from different inference algorithms.
}
\description{
get_ranked_consensus_matrix uses the internal function calculate_correlation_matrix() to get a single consensus matrix per inference algorithm. User can specify
the inference algorithms, correlation calculation methods and discretization methods, a combination of parameters will be created per inference algorithm to run calculate_correlation_matrix(),
this will generate a consensus matrix per inference algorithm. The consesus matrices from different inference algorithms are used to create a single binary matrix by rank based selection of edges.
}
